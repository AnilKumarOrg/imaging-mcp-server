{{/*
==========================================================================
CAST Imaging MCP Server - Kubernetes Deployment Template
==========================================================================
This template creates a Kubernetes Deployment for the CAST Imaging MCP Server.
A Deployment manages a set of replica pods and ensures they are running and healthy.

Key Features:
- Rolling updates for zero-downtime deployments  
- Configurable replica count and autoscaling support
- TCP-based health checks (readiness, liveness, startup probes)
- Persistent storage mounting for logs and data
- Environment-specific configuration injection via ConfigMap
- Security contexts and resource management
- Init container for storage directory setup

Template Variables Used:
- .Values.replicaCount: Number of pod replicas (default: 1)
- .Values.image: Container image configuration
- .Values.persistence: Storage volume configuration  
- .Values.resources: CPU/memory limits and requests
- .Values.env: Environment variables
- .Values.config: Application configuration settings

Health Check Strategy:
- Uses TCP socket probes instead of HTTP (more reliable for MCP protocol)
- Startup probe: 10s initial delay, 30 failures allowed (5 min startup time)
- Readiness probe: 5s delay, checks every 5s
- Liveness probe: 30s delay, checks every 10s
==========================================================================
*/}}

apiVersion: apps/v1                    # Kubernetes API version for Deployments
kind: Deployment                       # Resource type: Deployment
metadata:
  name: {{ include "cast-imaging-mcp.fullname" . }}  # Deployment name from helper template
  labels:
    {{- include "cast-imaging-mcp.labels" . | nindent 4 }}  # Standard labels from helper template
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}  # Number of pods (if autoscaling disabled)
  {{- end }}
  selector:                            # Label selector for managing pods
    matchLabels:
      {{- include "cast-imaging-mcp.selectorLabels" . | nindent 6 }}  # Pod selection labels
  template:                            # Pod template specification
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:                     # Custom annotations for pods
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:                          # Labels applied to pods
        {{- include "cast-imaging-mcp.labels" . | nindent 8 }}  # Standard labels
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}    # Additional custom labels
        {{- end }}
    spec:                              # Pod specification
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:                # Secrets for pulling private images
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:                 # Pod-level security context
        {{- toYaml (.Values.podSecurityContext | default (dict "fsGroup" 0 "runAsUser" 0 "runAsGroup" 0 "runAsNonRoot" false)) | nindent 8 }}
      {{- if .Values.persistence.enabled }}
      initContainers:                  # Init containers run before main containers
        - name: storage-init           # Storage initialization container
          image: busybox:1.35          # Lightweight image for setup tasks
          command: ['sh', '-c', 'mkdir -p /app/storage/logs /app/storage/data && chmod 755 /app/storage/logs /app/storage/data']  # Create directory structure
          volumeMounts:
            - name: app-storage        # Mount the persistent storage volume
              mountPath: /app/storage  # Mount point for directory creation
      {{- end }}
      containers:                      # Main application containers
        - name: castimaging-mcp-server # Main container name
          securityContext:             # Container-level security context
            {{- toYaml (.Values.securityContext | default (dict "allowPrivilegeEscalation" false "runAsNonRoot" false "runAsUser" 0 "capabilities" (dict "drop" (list "ALL")))) | nindent 12 }}
          image: "{{ .Values.image.repository | default "castimaging/imaging-mcp-server" }}:{{ .Values.image.tag | default .Chart.AppVersion }}"  # Container image with tag
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}  # When to pull the image
          {{- if .Values.command }}
          command:                     # Override container entrypoint if specified
            {{- toYaml .Values.command | nindent 12 }}
          {{- end }}
          {{- if .Values.args }}
          args:                        # Arguments passed to the command
            {{- toYaml .Values.args | nindent 12 }}
          {{- end }}
          ports:                       # Container ports exposed
            - name: http             # Port name for service reference
              containerPort: {{ .Values.service.targetPort | default 8282 }}  # MCP server port
              protocol: TCP          # TCP protocol
          {{- if .Values.env }}
          env:                       # Environment variables
            {{- toYaml .Values.env | nindent 12 }}
          {{- end }}
          {{- if .Values.envFrom }}
          envFrom:                   # Environment variables from ConfigMaps/Secrets
            {{- toYaml .Values.envFrom | nindent 12 }}
          {{- end }}
          livenessProbe:             # Health check to determine if container is alive
            {{- toYaml (.Values.livenessProbe | default (dict "tcpSocket" (dict "port" 8282) "initialDelaySeconds" 30 "periodSeconds" 10 "timeoutSeconds" 5 "failureThreshold" 3)) | nindent 12 }}
          readinessProbe:            # Health check to determine if container is ready for traffic
            {{- toYaml (.Values.readinessProbe | default (dict "tcpSocket" (dict "port" 8282) "initialDelaySeconds" 5 "periodSeconds" 5 "timeoutSeconds" 3 "failureThreshold" 3)) | nindent 12 }}
          startupProbe:              # Health check for slow-starting containers
            {{- toYaml (.Values.startupProbe | default (dict "tcpSocket" (dict "port" 8282) "initialDelaySeconds" 10 "periodSeconds" 10 "timeoutSeconds" 5 "failureThreshold" 30)) | nindent 12 }}
          resources:                 # CPU and memory resource limits/requests
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:              # Volumes mounted in the container
            {{- if .Values.persistence.enabled }}
            - name: app-storage      # Consolidated storage volume
              mountPath: /app/storage  # Mount path for storage
            {{- end }}
            {{- if .Values.config }}
            - name: app-config       # Configuration file mount
              mountPath: /app/server/config/app.config  # Application config file path
              subPath: app.config    # Specific file from ConfigMap
            {{- end }}
            {{- if .Values.extraVolumeMounts }}
            {{- toYaml .Values.extraVolumeMounts | nindent 12 }}  # Additional custom volume mounts
            {{- end }}
            {{- with .Values.volumeMounts }}
            {{- toYaml . | nindent 12 }}  # Additional volume mounts from values
            {{- end }}
      volumes:                       # Volumes available to the pod
        {{- if .Values.persistence.enabled }}
        - name: app-storage          # Consolidated storage volume
          persistentVolumeClaim:     # References a PVC
            claimName: imaging-mcp-server-pvc  # PVC name
        {{- end }}
        {{- if .Values.config }}
        - name: app-config           # Configuration volume
          configMap:                 # ConfigMap volume source
            name: {{ include "cast-imaging-mcp.fullname" . }}-config  # ConfigMap name
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- toYaml .Values.extraVolumes | nindent 8 }}  # Additional custom volumes
        {{- end }}
        {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}  # Additional volumes from values
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:                  # Node selection constraints
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:                      # Pod affinity/anti-affinity rules
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:                   # Tolerations for node taints
        {{- toYaml . | nindent 8 }}
      {{- end }}
